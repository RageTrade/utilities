name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: '727409640054.dkr.ecr.us-east-1.amazonaws.com/arb-bot'
  ECS_SERVICE: 'arb-bot-service'
  ECS_CLUSTER: 'arb-bot-cluster'
  ECS_TASK_DEFINITION: './.github/task-definition.json'

  CONTAINER_NAME: 'arb-bot-container'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - run: yarn install --frozen-lockfile
      - run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@1.4.10
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          force-new-deployment: true
          wait-for-service-stability: true
